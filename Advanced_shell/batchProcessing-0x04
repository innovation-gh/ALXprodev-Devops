#!/bin/bash

# Parallel Processing - Task 5
# Fetches Pokemon data in parallel using background processes
# Uses jobs and kill to manage processes

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
ERROR_FILE="errors.txt"
MAX_RETRIES=3

mkdir -p "$OUTPUT_DIR"

# Function to fetch Pokemon data with retry logic
fetch_pokemon_parallel() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local api_url="https://pokeapi.co/api/v2/pokemon/${pokemon_name}"
    local retry_count=0
    local temp_file="$output_file.tmp"

    echo "Starting fetch for $pokemon_name (PID: $$)"

    while [[ $retry_count -lt $MAX_RETRIES ]]; do
        if curl -s -o "$temp_file" "$api_url"; then
            if jq . "$temp_file" > /dev/null 2>&1; then
                mv "$temp_file" "$output_file"
                echo "✅ Completed $pokemon_name (PID: $$)"
                return 0
            else
                echo "Invalid JSON for $pokemon_name (attempt $((retry_count + 1)))"
            fi
        else
            echo "Failed to fetch $pokemon_name (attempt $((retry_count + 1)))"
        fi

        retry_count=$((retry_count + 1))
        [[ $retry_count -lt $MAX_RETRIES ]] && sleep 1
    done

    rm -f "$temp_file"
    echo "❌ Failed to fetch $pokemon_name after $MAX_RETRIES attempts" | tee -a "$ERROR_FILE"
    return 1
}

# Trap to clean up background processes if script exits early
cleanup() {
    echo "Cleaning up background processes..."
    jobs -p | xargs -r kill
}
trap cleanup EXIT

echo "Starting parallel Pokemon data fetching..."
echo "========================================="

# Launch all fetches in background
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_parallel "$pokemon" &
done

echo ""
echo "All processes started. Waiting for completion..."
echo "==============================================="

# Wait for all jobs to finish
wait

echo ""
echo "==============================================="
echo "🎉 All parallel fetch processes have finished."

# Show fetched files
ls -la "$OUTPUT_DIR"/*.json 2>/dev/null || echo "No JSON files found in $OUTPUT_DIR"
